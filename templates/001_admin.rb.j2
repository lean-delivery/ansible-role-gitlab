user_args ={
  email: "{{ gitlab_admin_email }}",
  name: "{{ gitlab_admin_name }}",
  username: "{{ gitlab_admin_username }}",
  password: "{{ gitlab_admin_password }}",
  admin: true,
  confirmed_at: DateTime.now
}

token_args = {
  personal_access_token: "{{ gitlab_admin_token }}",
  scopes: ["api"],
  name: "API token"
}

user = User.new(user_args)
user.skip_confirmation!


if user.save
  puts "Administrator account created:".color(:green)
  puts
  puts "login:    {{ gitlab_admin_username }}".color(:green)
  puts "password: ********".color(:green)
  class AddToken < ActiveRecord::Migration
  include Gitlab::Database::MigrationHelpers
  disable_ddl_transaction!
  DOWNTIME = false
    if Gitlab::Database.postgresql?
    if "{{ gitlab_version }}" == 'latest' || "{{ gitlab_version }}"[/\d+.\d+/, 0].to_f >= 11.9
      encrypted_token = Gitlab::CryptoHelper.sha256('{{ gitlab_admin_token }}')
    execute <<~SQL
    INSERT INTO personal_access_tokens (token_digest, name, scopes, created_at, updated_at, user_id)
      (SELECT \'#{encrypted_token}\', 'PersonalToken', '---\n- api\n', '#{Time.now}', '#{Time.now}', id from users where username = '{{ gitlab_admin_username }}')
    SQL
    else
      execute <<~SQL
    INSERT INTO personal_access_tokens (token, name, scopes, created_at, updated_at, user_id)
      (SELECT '{{ gitlab_admin_token }}', 'PersonalToken', '---\n- api\n', '#{Time.now}', '#{Time.now}', id from users where username = '{{ gitlab_admin_username }}')
      SQL
      end
    end
  end
else
  puts "Could not create the default administrator account:".color(:red)
  puts
  user.errors.full_messages.map do |message|
    puts "--> #{message}".color(:red)
  end
  puts
  exit 1
end
